/*----------------------------------------------------------------------------*/
/* */
/* Module: main.cpp */
/* Author: VEX */
/* Created: Thu Sep 26 2019 */
/* Description: Competition Template */
/* */
/*----------------------------------------------------------------------------*/


// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name] [Type] [Port(s)]
// Controller1 controller
// Intake motor 5
// Catapult motor 4
// FrontLeftDrive motor 2
// BackLeftDrive motor 3
// FrontRightDrive motor 11
// MiddleRightDrive motor 12
// BackRightDrive motor 13
// MiddleLeftDrive motor 20
// ---- END VEXCODE CONFIGURED DEVICES ----


#include "vex.h"


using namespace vex;


// A global instance of competition
competition Competition;


// define your global instances of motors and other devices here


/*---------------------------------------------------------------------------*/
/* Pre-Autonomous Functions */
/* */
/* You may want to perform some actions before the competition starts. */
/* Do them in the following function. You must return from this function */
/* or the autonomous and usercontrol tasks will not be started. This */
/* function is only called once after the V5 has been powered on and */
/* not every time that the robot is disabled. */
/*---------------------------------------------------------------------------*/


void pre_auton(void) {
// Initializing Robot Configuration. DO NOT REMOVE!
vexcodeInit();


// All activities that occur before the competition starts
// Example: clearing encoders, setting servo positions, ...
}


/*---------------------------------------------------------------------------*/
/* */
/* Autonomous Task */
/* */
/* This task is used to control your robot during the autonomous phase of */
/* a VEX Competition. */
/* */
/* You must modify the code to add your own robot specific commands here. */
/*---------------------------------------------------------------------------*/


void autonomous(void) {
// ..........................................................................
// Insert autonomous user code here.
// ..........................................................................
}


/*---------------------------------------------------------------------------*/
/* */
/* User Control Task */
/* */
/* This task is used to control your robot during the user control phase of */
/* a VEX Competition. */
/* */
/* You must modify the code to add your own robot specific commands here. */
/*---------------------------------------------------------------------------*/


void usercontrol(void) {
int catapultspeedPCT = 100;
int intakespeedPCT = 100;




while (1) {
// This is the main execution loop for the user control program.
// Each time through the loop your program should update motor + servo
// values based on feedback from the joysticks.


BackLeftDrive.spin(vex::directionType::rev, Controller1.Axis3.value(), vex::velocityUnits::pct);
MiddleLeftDrive.spin(vex::directionType::rev, Controller1.Axis3.value(), vex::velocityUnits::pct);
FrontLeftDrive.spin(vex::directionType::rev, Controller1.Axis3.value(), vex::velocityUnits::pct);
BackRightDrive.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
MiddleRightDrive.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
FrontRightDrive.spin(vex::directionType::fwd, Controller1.Axis2.value(), vex::velocityUnits::pct);
//Intake Code HERE//
if (Controller1.ButtonL1.pressing())
{
Intake.spin(vex::directionType::fwd, intakespeedPCT, vex::velocityUnits::pct);
}
else if (Controller1.ButtonL2.pressing())
{
Intake.spin(vex::directionType::rev, intakespeedPCT, vex::velocityUnits::pct);
}
else
{
Intake.stop(vex::brakeType::brake);
}


//Catapult Code HERE//
if (Controller1.ButtonR1.pressing())
{
Catapult.spin(vex::directionType::fwd, catapultspeedPCT, vex::velocityUnits::pct);
}
else if (Controller1.ButtonR2.pressing())
{
Catapult.spin(vex::directionType::rev, catapultspeedPCT, vex::velocityUnits::pct);
}
else
{
Catapult.stop(vex::brakeType::brake);
}


wait(20, msec); // Sleep the task for a short amount of time to
// prevent wasted resources.
}
}


//
// Main will set up the competition functions and callbacks.
//
int main() {
// Set up callbacks for autonomous and driver control periods.
Competition.autonomous(autonomous);
Competition.drivercontrol(usercontrol);


// Run the pre-autonomous function.
pre_auton();


// Prevent main from exiting with an infinite loop.
while (true) {
wait(100, msec);
}
}



